##main
#synth
snippet ///
	////////////////////////////////////// ${1:} //
snippet start
	(
		p=ProxySpace.push(s.boot);
		p.makeTempoClock;
	);
snippet control
	// $1 control ///////////////////////////////////////

	(
	~${1:}.quant=4;
	~$1.fadeTime=0;
	~$1={
		var ctl = ${2:Duty.kr(4/~tempo,0,Dseq([1,2,1,4],inf))};
		ctl;
	};
	);
	~$1.stop(4);
	~$1.clear;
	~$1.pause;
	~$1.resume;
snippet synth
	// $1 synth ///////////////////////////////////////

	(
	~$1.ar(2);
	~${1:}.quant=4;
	~$1.fadeTime=0.02;
	~$1={
		//  |       |       |       |       |  
		var pat = [
			1,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,
			0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,
			0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,
			0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0,
		].rotate(1);
		var imp = PulseDivider.kr(~tick.kr,1,~counter.kr%pat.size);
		var hit = Select.kr(PulseCount.kr(imp)%pat.size,pat);
		var env = EnvGen.ar(Env([0.001,1,0.0001],[0.002,0.5],[3,-3]),imp * hit);
		var sig = ${2:SinOsc.ar(50!2)};
		sig = sig * env;
		Splay.ar(sig,0.75,${3:0.5});
	};
	~$1.play;
	);
	~$1.stop(4);
	~$1.clear;
	~$1.pause;
	~$1.resume;
snippet simple
	// $1 synth ///////////////////////////////////////

	(
	~$1.ar(2);
	~${1:}.quant=4;
	~$1.fadeTime=2;
	~$1={
		var sig = ${2:SinOsc.ar(50!2)};
		Splay.ar(sig,0.5,${3:0.25});
	};
	~$1.play;
	);
	~$1.stop(4);
	~$1.clear;
	~$1.pause;
	~$1.resume;
snippet bare
	// $1 synth ///////////////////////////////////////

	(
	~$1.ar(2);
	~${1:}.quant=4;
	~$1.fadeTime=2;
	~$1={
		var sig = ${2:SinOsc.ar(50!2)};
		Splay.ar(sig,0.5,${3:0.25});
	};
	);
	~$1.clear;

snippet switch
	// $1 synth ///////////////////////////////////////

	(
	~$1.ar(2);
	~${1:}.quant=4;
	~$1.fadeTime=0.2;
	~$1={
		//         |       |       |       |       |  
		var pat = [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0].rotate(1);
		var imp = PulseDivider.kr(~tick.kr,1,~counter.kr % pat.size);
		var hit = Select.kr(PulseCount.kr(imp)%pat.size,pat);
		var env = EnvGen.ar(Env([0.001,1,0.0001],[0.002,0.5],[3,-3],curve:'exp'),imp * hit);
		var sig = [
		${2:SinOsc.ar(50!2),}
		];
		sig = Select.ar(PulseCount.kr(imp*hit)%sig.size,sig);
		sig = sig * env;
		Splay.ar(sig,0.75,${3:0.5});
	};
	~$1.play;
	);
	~$1.stop(4);
	~$1.clear;
	~$1.pause;
	~$1.resume;
snippet synthm
	// $1 synth ///////////////////////////////////////

	(
	~${1:}.quant=4;
	~$1.fadeTime=0.02;
	~$1={
		//         |   |   |   |   |   |   |   |  
		var pat = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0];
		var imp = PulseDivider.kr(~tick.kr,2,~counter.kr);
		var hit = Select.kr(PulseCount.kr(imp)%pat.size,pat);
		var env = EnvGen.ar(Env([0.001,1,0.001],[0.002,0.5],[3,-3]),imp * hit);
		var sig = ${2:LFSaw.ar(50!2)};
		sig = sig${3:} * env;
		Mix.ar(sig) * 0.5;
	};
	~$1.play;
	);
	~$1.stop(7);
	~$1.clear;
snippet filter
	// $1 filter ///////////////////////////////////////

	(
	~${1:}.quant=4;
	~$1.fadeTime=1;
	~$1={
		var synths = p.playingProxies;
		var high,mid,low;
		var sig = [];
		synths.collect{|n| if(n!=\\$1){sig=sig++p.[n.asSymbol];}};

		//sig = Resonz.ar(sig,MouseX.kr(100,10000,(1..8)),MouseY.kr(0.1,1,(1..4)/16))/4;
		//sig = CombN.ar(sig,4,[4,8,16],32)+sig;
		//sig = GVerb.ar(LPF.ar(sig,7000)+HPF.ar(sig,300),100,[3,4],spread:[95,96])/4 + sig;
		low = CompanderD.ar(LPF.ar(sig,LFNoise2.kr(1/2!2).range(100,800)),3/4,1,1/2);
		mid = CompanderD.ar(BPF.ar(sig,LFNoise2.kr(1/2!2).range(700,1500),2),3/4,1,1/2);
		high = CompanderD.ar(HPF.ar(sig,LFNoise2.kr(1/2!2).range(1000,10000)),3/4,1,1/2);
		sig = CompanderD.ar((high+mid+low).flat,3/4,1,1/2,0.002,0.3);
		sig = LPF.ar(DWGReverb.ar(NumChannels.ar(sig,2),[4000,4010]),2000);
		Splay.ar(sig,0.5,${3:0.25});
	};
	~$1.play;
	);
	~$1.stop(7);
	~$1.clear;
snippet master
	(
		~master.quant=4;
		~master.play;
		~master.fadeTime = 0.01;
		~master = {|wet=0.15,lp=3500,hp=250,len=10,rev = 3|
		var sig = In.ar([0,1]);
		var orig = sig;
		var fx;
		//fx = Limiter.ar(sig,0.95);
		sig = CompanderD.ar(sig,3/4,1/1.1,1/3);
		fx = LPF.ar(sig,lp);
		fx = HPF.ar(fx,hp);
		fx = DWGReverbC1C3.ar(NumChannels.ar(fx,2),[5000,5010],1/len)/rev;
		sig = SelectX.ar(wet,[orig,fx]);
		sig = NumChannels.ar(sig,2);
		ReplaceOut.ar(0,sig);
		};
	);
	p.moveNodeToTail(\master);
snippet filterm
	// $1 filter ///////////////////////////////////////

	(
	~${1:}.quant=4;
	~$1.fadeTime=1;
	~$1={
		var high,mid,low;
		var sig = ${2:0};

		sig = GVerb.ar(sig,40)/16 + sig;
		low = CompanderD.ar(LPF.ar(sig,600),3/4,1/2,1/2);
		mid = CompanderD.ar(BPF.ar(sig,800,2),3/4,1/2,1/2);
		high = CompanderD.ar(HPF.ar(sig,900),3/4,1/2,1/2);
		sig = CompanderD.ar((high+mid+low).flat,3/4,1/1.1,1/1.1);
		Mix.ar(sig * ${3:0.25});
	};
	~$1.play;
	);
	~$1.stop(7);
	~a$1.clear;
snippet lpf
	LPF.ar(sig,${1:800})
snippet hpf
	HPF.ar(sig,${1:800})
snippet bpf
	BPF.ar(sig,${1:800})
snippet duty
	Duty.kr(${1:4}/~tempo,0,Dseq([${2:1,2,1.5,1.33333}],inf))
snippet saws
	LFSaw.ar(${1:~tempo.kr}).exprange(0.001,${2:1})
snippet decay
	Decay.ar(Impulse.ar(${1:1/2},(0..3)/4),${2:1})
snippet env
	EnvGen.ar(Env([${1:0.001,1,0.001}],[${2:0.002,0.5}],[3,-3]),Impulse.ar(${3:~tempo/4}))
snippet impulse
	Impulse.ar(${1:1/2},(0..3)/4)
snippet gverb
	GVerb.ar(${1:sig},${2:10},${3:spread:45})
snippet gpl
	/*
	* This program is free software; you can redistribute it and/or modify
	* it under the terms of the GNU General Public License as published by
	* the Free Software Foundation; either version 2 of the License, or
	* (at your option) any later version.
	*
	* This program is distributed in the hope that it will be useful,
	* but WITHOUT ANY WARRANTY; without even the implied warranty of
	* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	* GNU General Public License for more details.
	*
	* You should have received a copy of the GNU General Public License
	* along with this program; if not, see <http://www.gnu.org/licenses/>.
	*
	* Copyright (C) ${1:Author}, `strftime("%Y")`
	*/
	${0}

snippet startrec
	(
		s.prepareForRecord("/tmp/${1}");
		s.record;
		History.clear.start;
	);
snippet endrec
	(
		History.end;
		s.stopRecording;
	);
snippet playrec
	s.prepareForRecord("/tmp/${1}");
	(
		Dialog.openPanel({ arg path;
			path.postln;
			s.record;
			h=History.new.loadCS(path,forward:true);
			h.play;
		},{
			"cancelled".postln;
		});
	)	
	s.stopRecording;
snippet sampler
	b = Buffer.read(s,Platform.resourceDir ++ "/sounds/${2:douce.wav}");

	// player synth ///////////////////////////////////////

	(
	    ~$1.ar(2);
	    ~${1:}.quant=4;
	    ~$1.fadeTime=2.02;
	    ~$1={
		var mod = 1;//[-1,0.25,-0.25,1/8,1/16];
		var spread = 0.0;
		var pos = [0,0.5];
		//         |       |       |       |       |  
		var pat = [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0].rotate(1);
		var imp = PulseDivider.kr(~tick.kr,1,~counter.kr);
		var hit = Select.kr(PulseCount.kr(imp)%pat.size,pat);
		var env = EnvGen.ar(Env([0.001,1,0.001],[0.002,0.5],[3,-3],curve:'exp'),imp * hit);
		var sig = PlayBuf.ar(b.numChannels,b.bufnum,BufRateScale.kr(b.bufnum)*mod+(env*0.01),imp, (pos + BrownNoise.ar(1!8).range(spread * -1,spread)) * BufFrames.kr(b.bufnum),1);

		sig = sig * env;
		Splay.ar(sig.flat,0.5,${3:0.5});
	    };
	    ~$1.play;
	);
	~$1.stop(7);
	~$1.clear;
snippet grains
	b = Buffer.read(s,Platform.resourceDir ++ "/sounds/mono/${2:douce.wav}");

	// player synth ///////////////////////////////////////

	(
	    ~$1.ar(2);
	    ~${1:}.quant=4;
	    ~$1.fadeTime=2.02;
	    ~$1={
		var mod = 1;//[1,1.3333,1.5,2];
			var trate, dur, clk, pos, pan,sig;
			trate = 120;
			dur = BufDur.kr(b) / trate;
			clk = Impulse.kr(trate);
			pos = LFSaw.ar(1/4000/[1,2,4,8]).range(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk);
			pan = WhiteNoise.kr(0.6);
			sig = TGrains.ar(2, clk, b.bufnum, mod, pos, dur, pan, 0.3);
			//sig = sig * (LFTri.ar(1/16/[1,2,3,4])**4);
			sig = CompanderD.ar(sig,3/4,1/2,1/2);
			Splay.ar(sig.flat,0.5,${3:0.5});
	    };
	    ~$1.play;
	);
	~$1.stop(7);
	~$1.clear;

snippet tick
	(
		~tick.kr(1);
		~tick.clock = p.clock;
		~tick.quant=4;
		~tick = { Impulse.kr(~tempo * 4); };
		~counter = {PulseCount.kr(~tick.kr);};
	);		
snippet mixer
	(
	n = ProxyMixer(p,32);
	n.parent.alwaysOnTop_(true);
	)
snippet stop
	(
	//////////////////////////  FADE -> OUT ///////////////////////////////////////////////////////
	{
	  p.arProxyNames.do({|synth| if(synth.asSymbol!=\master){p[synth.asSymbol].clear(${1:20});};});
	}.fork;  
	)
snippet sync
	(
		//s.latency=0.2;
		//p.clock.tempo_(${1:120}/60);
		p.arProxyNames.do({|synth| if(synth.asSymbol!=\master){p[synth.asSymbol].rebuild;};});
		~tick.kr(1);
		~tick.quant = 24;
		~counter.quant = 24;
		~counter = {PulseCount.kr(~tick.kr);};
		~tick = { Impulse.kr( ~tempo * 4 ); };
	);
snippet clock
	p.makeTempoClock;
	(
		TempoClock.default = p.clock;
		p.clock.tempo_(${1:120}/60);
		p.arProxyNames.do(p[_.asSymbol].rebuild);
	)
snippet sched
	(
	  p.clock.sched(p.clock.timeToNextBeat(${1:1} * 16),{ 
	  ${2:}
	  });
	);
snippet scheds
	//////////////////////////  FADE -> OUT ///////////////////////////////////////////////////////
	(
	  p.clock.sched(p.clock.timeToNextBeat(${1:16}),{
	  p.arProxyNames.do({|synth| if(synth.asSymbol!=\master){p[synth.asSymbol].clear(${2:0.2});};});
	});  
	);
snippet vosc
	b = Buffer.allocConsecutive(3,s,4096,1);
	(
		~${1:}.ar(3);
		~$1.quant=4;
		~$1.fadeTime=4;
		~$1={
			var f = 50;
			var sig = [
				SinOsc.ar(f),
				BrownNoise.ar(1),
				LFSaw.ar(f),
			];
			3.do{|i|
			RecordBuf.ar(Mix(sig[i]),b[i],loop:1);
		};
		sig;
		};
	);


